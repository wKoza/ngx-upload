{"version":3,"file":"inputfile.component.js","sourceRoot":"","sources":["../../src/components/inputfile.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAU,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC5F,OAAO,EAAa,kBAAkB,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACvE,OAAO,EAAE,uBAAuB,EAAE,MAAM,KAAK,CAAC;AAI9C;IAoBE,4BAAoB,QAAkB,EAAU,QAAiC,EAAU,QAAmB,EAC9E,MAAc,EAAsB,kBAAsC;QADtF,aAAQ,GAAR,QAAQ,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAyB;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAC9E,WAAM,GAAN,MAAM,CAAQ;QAAsB,uBAAkB,GAAlB,kBAAkB,CAAoB;QAR1G,UAAK,GAAc,IAAI,GAAG,EAAE,CAAC;QAS3B,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;SAC9B;aAAM,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAClC,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACvB;IACH,CAAC;IAED,yCAAY,GAAZ;QACE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxE,iCAAiC;QACjC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,EAAE,CAAC;IACrC,CAAC;IAED,qCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK;YAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAChH,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM;YAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAClH,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO;YAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChH,CAAC;;gBAzCF,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,8JAIG;oBACb,MAAM,EAAE,CAAC,oEAAoE,CAAC;iBAC/E;;;;gBAdmB,QAAQ;gBAEnB,uBAAuB;gBAFgB,SAAS;gBACjB,MAAM,uBA0B/B,QAAQ;gBA1BH,kBAAkB,uBA0Ba,QAAQ;;;uBAVxD,SAAS,SAAC,MAAM;;IA+BnB,yBAAC;CAAA,AA1CD,IA0CC;SAjCY,kBAAkB","sourcesContent":["import { Component, Injector, OnInit, Optional, Renderer2, ViewChild } from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\nimport { HttpClientUploadService } from '../';\nimport { InputFileOptions } from '../utils/configuration.model';\n\n\n@Component({\n  selector: 'ngx-upload-inputfile',\n  template: `\n      <label class=\"input-file\">\n          <input type=\"file\" #file (change)=\"onFilesAdded()\">\n          <ng-content></ng-content>\n      </label>`,\n  styles: ['input[type=\"file\"] { display: none; } .input-file { width: 100%; }']\n})\nexport class InputfileComponent implements OnInit {\n\n  @ViewChild('file') file;\n\n  files: Set<File> = new Set();\n\n  options: InputFileOptions;\n\n  private formGroup: FormGroup | null;\n\n\n  constructor(private injector: Injector, private uploader: HttpClientUploadService, private renderer: Renderer2,\n              @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective) {\n    if (this.ngForm) {\n      this.formGroup = ngForm.form;\n    } else if (this.formGroupDirective) {\n      this.formGroup = formGroupDirective.form;\n    } else {\n      this.formGroup = null;\n    }\n  }\n\n  onFilesAdded() {\n    this.uploader.addToQueue(this.file.nativeElement.files, this.formGroup);\n    // Clear the previous input value\n    this.file.nativeElement.value = '';\n  }\n\n  ngOnInit() {\n    if (this.options.multiple !== false) this.renderer.setProperty(this.file.nativeElement, 'multiple', 'multiple');\n    if (this.options.accept) this.renderer.setProperty(this.file.nativeElement, 'accept', this.options.accept.join());\n    if (this.options.capture) this.renderer.setProperty(this.file.nativeElement, 'capture', this.options.capture);\n  }\n}\n"]}