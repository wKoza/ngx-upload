{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAuB,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzE,OAAO,EAGL,uBAAuB,EACvB,oBAAoB,EACpB,gBAAgB,EACD,mBAAmB,EAAE,kBAAkB,EACvD,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClF,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAChE,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAE,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAE,qBAAqB,EAAE,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAGtE,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAChE,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAG9E,IAAM,eAAe,GAAG;IACpB,uBAAuB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,kBAAkB;CAC5F,CAAC;AAEF;;;;;GAKG;AACH,MAAM,yBAAyB,OAAsB;IACjD,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IACxE,IAAI,OAAO,EAAE;QACT,IAAM,QAAQ,GAAY,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,CAAC;QAC1E,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAC3D,OAAO,IAAI,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC7C;IACD,OAAO,IAAI,UAAU,EAAE,CAAC;AAC5B,CAAC;AAED;IAAA;IAmCA,CAAC;IAxBU,uBAAO,GAAd,UAAe,iBAAqC,EACrC,aAA6B;QAExC,OAAO;YACH,QAAQ,EAAE,eAAe;YACzB,SAAS,EAAE;gBAEP,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,gBAAgB,EAAC;gBAC3F;oBACI,OAAO,EAAE,uBAAuB;oBAChC,QAAQ,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,oBAAoB;iBAC3E;gBACD,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,uBAAuB,EAAC;gBACjE;oBACI,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,cAAc;oBAC1B,IAAI,EAAE,CAAC,kBAAkB,CAAC;iBAC7B;gBACD,gBAAgB;gBAChB,uBAAuB;aAC1B;SACJ,CAAA;IAEL,CAAC;IAAA,CAAC;;gBAlCL,QAAQ,SAAC;oBACN,YAAY,EACL,eAAe,QACrB;oBACD,OAAO,EACA,eAAe,QACrB;oBACD,eAAe,EAAE,CAAC,kBAAkB,CAAC;iBACxC;;IA2BD,sBAAC;CAAA,AAnCD,IAmCC;SAzBY,eAAe","sourcesContent":["import { isDevMode, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport {\n  DropTargetOptions,\n  LoggerOptions,\n  NGX_DROP_TARGET_OPTIONS,\n  ngxDropTargetOptions,\n  ngxloggerOptions,\n  UploadService, NGX_UPLOAD_STRATEGY, NGX_LOGGER_OPTIONS, UploadEndPoint\n} from './utils/configuration.model';\nimport { NgxDragAndDropDirective } from './directives/dropzone.directive';\nimport { ConsoleLogger, NgxUploadLogger, NoOpLogger } from './utils/logger.model';\nimport { XhrUploadService } from './services/xhrUpload.service';\nimport { HttpClientUploadService } from './services/httpClientUpload.service';\nimport { NgxThumbnailDirective } from './directives/thumbnail.directive';\nimport { NgxInputFileDirective } from './directives/inputfile.directive';\nimport { InputfileComponent } from './components/inputfile.component';\nexport { DropTargetOptions, UploadEndPoint, LoggerOptions, InputFileOptions } from './utils/configuration.model';\nexport { MineTypeEnum } from './utils/mimetype.model';\nexport { FileItem } from './services/fileItem.model';\nexport { XhrUploadService } from './services/xhrUpload.service';\nexport { HttpClientUploadService } from './services/httpClientUpload.service';\nexport { UploadService } from './utils/configuration.model';\n\nconst ngxDeclarations = [\n    NgxDragAndDropDirective, NgxThumbnailDirective, NgxInputFileDirective, InputfileComponent\n];\n\n/**\n * Factory associated with internal logger\n * @param options\n * @returns {any}\n * @private\n */\nexport function _loggerFactory(options: LoggerOptions): NgxUploadLogger {\n    const enabled = options.enabled != null ? options.enabled : isDevMode();\n    if (enabled) {\n        const _console: Console = typeof console === 'object' ? console : <any>{};\n        const debug = options.debug != null ? options.debug : true;\n        return new ConsoleLogger(_console, debug);\n    }\n    return new NoOpLogger();\n}\n\n@NgModule({\n    declarations: [\n        ...ngxDeclarations\n    ],\n    exports: [\n        ...ngxDeclarations\n    ],\n    entryComponents: [InputfileComponent]\n})\n\nexport class NgxUploadModule {\n    static forRoot(dropTargetOptions?: DropTargetOptions,\n                   loggerOptions?: LoggerOptions): ModuleWithProviders {\n\n        return {\n            ngModule: NgxUploadModule,\n            providers: [\n\n                {provide: NGX_LOGGER_OPTIONS, useValue: (loggerOptions) ? loggerOptions : ngxloggerOptions},\n                {\n                    provide: NGX_DROP_TARGET_OPTIONS,\n                    useValue: (dropTargetOptions) ? dropTargetOptions : ngxDropTargetOptions\n                },\n                {provide: NGX_UPLOAD_STRATEGY, useValue: HttpClientUploadService},\n                {\n                    provide: NgxUploadLogger,\n                    useFactory: _loggerFactory,\n                    deps: [NGX_LOGGER_OPTIONS]\n                },\n                XhrUploadService,\n                HttpClientUploadService\n            ]\n        }\n\n    };\n}\n"]}