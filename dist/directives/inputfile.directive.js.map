{"version":3,"file":"inputfile.directive.js","sourceRoot":"","sources":["../../src/directives/inputfile.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,EAAgB,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAU,WAAW,EAAE,gBAAgB,EAC1G,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAoB,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAGrF;IAQE,+BAAoB,QAAkC,EAAU,QAAkB,EAC9D,KAAuB,EAAU,WAA6B;QAD9D,aAAQ,GAAR,QAAQ,CAA0B;QAAU,aAAQ,GAAR,QAAQ,CAAU;QAC9D,UAAK,GAAL,KAAK,CAAkB;QAAU,gBAAW,GAAX,WAAW,CAAkB;IAClF,CAAC;IAED,wCAAQ,GAAR;QACE,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAClE,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;QAC1E,IAAM,SAAS,GAAqC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;QACvI,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC;QAC3F,eAAe,CAAC,aAAa,EAAE,CAAC;IAClC,CAAC;;gBAlBF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;iBAC3B;;;;gBARC,wBAAwB;gBAA2B,QAAQ;gBAA8B,gBAAgB;gBAA7B,WAAW;;;+BAWtF,KAAK;;IAcR,4BAAC;CAAA,AAnBD,IAmBC;SAhBY,qBAAqB","sourcesContent":["import {\n  ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, OnInit, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { InputfileComponent } from '../components/inputfile.component';\nimport { InputFileOptions, ngxInputFileOptions } from '../utils/configuration.model';\n\n\n@Directive({\n  selector: '[ngxInputFile]'\n})\nexport class NgxInputFileDirective implements OnInit {\n\n  @Input()\n  ngxInputFile: InputFileOptions;\n\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\n              private vcRef: ViewContainerRef, private templateRef: TemplateRef<any>) {\n  }\n\n  ngOnInit() {\n    const _contentViewRef = this.templateRef.createEmbeddedView(null);\n    const factory = this.resolver.resolveComponentFactory(InputfileComponent);\n    const component: ComponentRef<InputfileComponent> = this.vcRef.createComponent(factory, 0, this.injector, [_contentViewRef.rootNodes]);\n    component.instance.options = (this.ngxInputFile) ? this.ngxInputFile : ngxInputFileOptions;\n    _contentViewRef.detectChanges();\n  }\n}\n"]}