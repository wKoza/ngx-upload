{"version":3,"file":"dropzone.directive.js","sourceRoot":"","sources":["../../src/directives/dropzone.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnInit,\n    Output,\n    Renderer2,\n    Inject, Injector, Optional\n} from '@angular/core';\nimport { FormGroup, FormGroupDirective, NgForm } from '@angular/forms';\nimport {\n    DropTargetOptions, NGX_DROP_TARGET_OPTIONS, NGX_UPLOAD_STRATEGY, UploadService\n} from '../utils/configuration.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { AbstractUploadService } from '../services/abstractUpload.service';\n\n\n/**\n * Transforms a node into a drag and drop zone.\n */\n@Directive({\n    selector: '[ngxDragAndDrop]',\n    exportAs: 'ngxDragAndDrop'\n})\nexport class NgxDragAndDropDirective implements OnInit {\n\n    uploader: AbstractUploadService;\n\n    @Input()\n    set ngxDragAndDrop(dropOptions: DropTargetOptions) {\n        if (dropOptions) {\n            this.logger.debug(JSON.stringify(dropOptions));\n            this.dropOptions = dropOptions;\n        }\n    }\n\n    private formGroup: FormGroup | null;\n\n    constructor(private el: ElementRef,\n                private renderer: Renderer2,\n                private injector: Injector,\n                private logger: NgxUploadLogger,\n                @Inject(NGX_DROP_TARGET_OPTIONS) private dropOptions: DropTargetOptions,\n                @Inject(NGX_UPLOAD_STRATEGY) private strategy: UploadService,\n                @Optional() private ngForm: NgForm, @Optional() private formGroupDirective: FormGroupDirective) {\n\n        if (this.ngForm) {\n            this.formGroup = ngForm.form;\n        } else if (this.formGroupDirective) {\n            this.formGroup = formGroupDirective.form;\n        } else {\n            this.formGroup = null;\n        }\n    }\n\n    ngOnInit(): void {\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n        this.logger.info('strategy : ' + this.strategy!.toString());\n        this.uploader = this.injector.get(this.strategy);\n    }\n\n    @HostListener('dragleave', ['$event']) onDragLeave(event: DragEvent) {\n        this.logger.debug('dragleave event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.color);\n        this.stopAndPrevent(event);\n    }\n\n    @HostListener('drop', ['$event']) dropEvent(event: Event) {\n        this.logger.debug('drop event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        const transfer = this.getTransfer(event);\n        if (!transfer) {\n            return;\n        }\n        transfer.dropEffect = 'copy';\n        this.stopAndPrevent(event);\n        this.uploader.addToQueue(transfer.files, this.formGroup, this.dropOptions);\n    }\n\n\n    @HostListener('dragover', ['$event'])\n    onDragOver(event: DragEvent) {\n        this.logger.debug('dragover event');\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.color);\n        this.renderer.removeClass(this.el.nativeElement, this.dropOptions.colorDrop);\n        this.renderer.addClass(this.el.nativeElement, this.dropOptions.colorDrag);\n        const transfer = this.getTransfer(event);\n        if (!this.haveFiles(transfer.types)) {\n            return;\n        }\n        this.stopAndPrevent(event);\n    }\n\n    private stopAndPrevent(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTransfer(event): DataTransfer {\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    }\n\n    private haveFiles(types: any): boolean {\n        if (!types) {\n            return false;\n        }\n        if (types.indexOf) {\n            return types.indexOf('Files') !== -1;\n        } else if (types.contains) {\n            return types.contains('Files');\n        } else {\n            return false;\n        }\n    }\n\n}\n"]}