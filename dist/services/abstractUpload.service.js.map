{"version":3,"file":"abstractUpload.service.js","sourceRoot":"","sources":["../../src/services/abstractUpload.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileItem } from './fileItem.model';\nimport { FormGroup } from '@angular/forms';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { Subject } from 'rxjs';\nimport { DropTargetOptions, UploadEndPoint } from '../utils/configuration.model';\n\nexport abstract class AbstractUploadService {\n\n  queue: FileItem[];\n  progressTotal = 0;\n  disableMultipart: boolean;\n  withCredentials: boolean;\n\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  protected headers: Map<string, string[]>;\n\n  public onCancel$ = new Subject<FileItem>();\n  public onError$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>();\n  public onDropError$ = new Subject<{ item?: File, errorAccept: boolean, errorMultiple: boolean }>();\n  public onSuccess$ = new Subject<{ item: FileItem, body: any, status: number, headers: any }>(); // TODO headers isn't `any` but `Array`\n  public onBeforeUploadItem$ = new Subject<FileItem>();\n  public onProgress$ = new Subject<{ item: FileItem, progress: number }>();\n  public onAddToQueue$ = new Subject<FileItem>();\n\n  constructor(protected logger: NgxUploadLogger) {\n    this.queue = new Array<FileItem>();\n    this.headers = new Map();\n    this.disableMultipart = false;\n  }\n\n  /**\n   * Adds files to the queue\n   */\n  addToQueue(files: FileList, formGroup: FormGroup | null, dropOptions?: DropTargetOptions) {\n\n    this.logger.info('add to queue');\n\n    if (dropOptions && !dropOptions.multiple) {\n      if (files.length > 1) {\n        this.logger.error('there is more than one file.');\n        this.onDropError$.next({errorAccept: false, errorMultiple: true});\n        return;\n      }\n    }\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i)!;\n      this.logger.debug(files.item(i));\n\n      if (dropOptions && dropOptions.accept) {\n        const accepted = dropOptions.accept.some((type: string) => type === file.type);\n        if (!accepted) {\n          this.logger.error('this file is not accepted because of its type', file);\n          this.onDropError$.next({item: file, errorAccept: true, errorMultiple: false});\n          continue\n        }\n      }\n\n      const fileItem = new FileItem(file, this, this.logger);\n      if (formGroup) {\n        Object.keys(formGroup.controls).forEach((key) => {\n          fileItem.formData.append(key, formGroup.get(key) !.value);\n        });\n      }\n      this.queue.push(fileItem);\n      this.onAddToQueue$.next(fileItem);\n    }\n  }\n\n\n  abstract uploadFileItem(fileItem: FileItem, endpoint: UploadEndPoint, options?: any): void;\n\n\n  abstract cancelFileItem(fileItem: FileItem): void;\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  uploadAll(endpoint: UploadEndPoint, options?: any) {\n    const items = this.queue.filter(item => (item.isReady));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.upload(endpoint, options);\n    }\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  cancelAll() {\n    const items: FileItem[] = this.queue.filter(item => (item.uploadInProgress));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      item.cancel();\n    }\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n  /**\n   * Uploads all not uploaded items of queue\n   */\n  removeAllFromQueue() {\n    const items: FileItem[] = this.queue.filter(item => (!item.uploadInProgress && !item.isSuccess));\n    if (!items.length) {\n      return;\n    }\n\n    for (const item of items) {\n      this.removeFromQueue(item);\n    }\n  }\n\n  removeFromQueue(fileItem: FileItem) {\n    const index = this.queue.indexOf(fileItem);\n    const item = this.queue[index];\n    if (item.uploadInProgress) {\n      item.cancel();\n    }\n    this.queue.splice(index, 1);\n    this.progressTotal = this.computeTotalProgress();\n  }\n\n\n  /**\n   * Returns the total progress\n   * @param {Number} [value]\n   * @returns {Number}\n   * @private\n   */\n  computeTotalProgress(): number {\n    let totalCurrent = 0;\n    let total = 0;\n    for (const item of this.queue) {\n      if (item.uploadInProgress || item.isSuccess) {\n        totalCurrent += (item.file.size / 100) * item.progress || 0;\n        total += item.file.size;\n        this.logger.debug(totalCurrent + ' / ' + total);\n      }\n    }\n    return Math.round((totalCurrent * 100) / total);\n  }\n\n  /**\n   * Prepares file status before upload\n   * @param item\n   */\n  protected onBeforeUploadItem(item: FileItem) {\n    this.logger.info('enter uploadService.ɵonBeforeUploadItem()');\n    item.ɵonBeforeUploadItem();\n    this.onBeforeUploadItem$.next(item);\n  }\n\n  /**\n   * Update status during upload progress\n   * @param item\n   * @param progress\n   */\n  protected onProgressItem(item: FileItem, progress: number): void {\n    this.logger.info(`call onProgressItem ${item} ${progress}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ɵonProgress(progress);\n    this.onProgress$.next({item, progress});\n  }\n\n  /**\n   * Callback called when an upload error occurs\n   * @param item\n   * @param xhr\n   */\n  protected onError(item: FileItem, body: any, status: number, headers: any) {\n    this.logger.info(`call onError ${item} ${body} ${status} ${headers}`);\n    item.ɵonError();\n    this.onError$.next({item, body, status, headers});\n  }\n\n  /**\n   * Callback called when an upload success occurs\n   * @param item\n   * @param xhr\n   */\n  protected onSuccess(item: FileItem, body: any, status: number, headers: any) { // TODO headers is not any\n    this.logger.info(`call onSuccess ${item} ${body} ${status} ${headers}`);\n    this.progressTotal = this.computeTotalProgress();\n    item.ɵonSuccess();\n    this.onSuccess$.next({item, body, status, headers});\n  }\n\n\n}\n\n"]}