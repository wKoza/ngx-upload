{"version":3,"file":"xhrUpload.service.js","sourceRoot":"","sources":["../../src/services/xhrUpload.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,OAAO,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,EAA0B,UAAU,EAAE,MAAM,MAAM,CAAC;AAE1D,mGAAmG;AAEnG;;GAEG;AACH;IACsC,oCAAqB;IAKvD,0BAAsB,MAAuB;QAA7C,YACI,kBAAM,MAAM,CAAC,SAEhB;QAHqB,YAAM,GAAN,MAAM,CAAiB;;IAG7C,CAAC;IAGD,yCAAc,GAAd,UAAe,QAAkB,EAAE,QAAwB,EAAE,OAAiB;QAA9E,iBAsGC;QAtG4D,wBAAA,EAAA,YAAiB;QAE1E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QAEzD,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAgB,CAAC;QACzC,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAa,CAAC;QAEnC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE/B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAE9B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO;SACV;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,QAAQ,CAAC,GAAG,GAAG,IAAI,UAAU,CAAW,UAAC,gBAAoC;YAEzE,KAAI,CAAC,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YAChC,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAEjC,IAAI,CAAC,CAAC,KAAI,CAAC,eAAe,EAAE;gBACxB,KAAI,CAAC,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC;aACnC;YAED,iCAAiC;YACjC,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,IAAI;gBAC9B,KAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;YAEH,iBAAiB;YACjB,IAAM,MAAM,GAAG;gBAEX,IAAM,EAAE,GAAG,KAAI,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;gBAE3D,IAAI,GAAG,KAAK,iBAAiB,EAAE;oBAC3B,0DAA0D;oBAC1D,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACzC,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;oBAC3F,mEAAmE;oBACnE,0CAA0C;oBAC1C,gBAAgB,CAAC,QAAQ,EAAE,CAAC;iBAC/B;qBAAM,IAAI,EAAE,EAAE;oBACX,0DAA0D;oBAC1D,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACzC,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;oBAC3F,mEAAmE;oBACnE,0CAA0C;oBAC1C,gBAAgB,CAAC,QAAQ,EAAE,CAAC;iBAC/B;qBAAM;oBACH,6DAA6D;oBAC7D,gBAAgB,CAAC,KAAK,CAAC,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAC1C,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;iBAC5F;YACL,CAAC,CAAC;YAEF,sBAAsB;YACtB,IAAM,OAAO,GAAG,UAAC,GAAe;gBAC5B,gBAAgB,CAAC,KAAK,CAAC,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC1C,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC7F,CAAC,CAAC;YAEF;;;eAGG;YACH,IAAM,UAAU,GAAG,UAAC,KAAK;gBACrB,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3F,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC;gBAC5C,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC,CAAC;YAGF,kDAAkD;YAClD,KAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC1C,KAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC5C,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAEzD,IAAI,QAAQ,CAAC;YAGb,IAAI,CAAC,KAAI,CAAC,gBAAgB,EAAE;gBACxB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACzB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1D;iBAAM;gBACH,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC7B,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;aACxB;YAED,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAExB,OAAO;gBACH,4DAA4D;gBAC5D,KAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC/C,KAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAC7C,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBAC5D,wCAAwC;gBACxC,KAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC,CAAC;QACN,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAGD,yCAAc,GAAd,UAAe,QAAkB;QAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;;gBAxHJ,UAAU;;;;gBAVF,eAAe;;IAoIxB,uBAAC;CAAA,AA1HD,CACsC,qBAAqB,GAyH1D;SAzHY,gBAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FileItem } from './fileItem.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { UploadEndPoint } from '../utils/configuration.model';\nimport { AbstractUploadService } from './abstractUpload.service';\nimport { Subscription, Observer, Observable } from 'rxjs';\n\n// send an event for each upload event. These events can be catched by the user for call a callback\n\n/*\n  @Deprecated since 6.1.0\n */\n@Injectable()\nexport class XhrUploadService extends AbstractUploadService {\n\n    private xhr: XMLHttpRequest;\n    sub: Subscription;\n\n    constructor(protected logger: NgxUploadLogger) {\n        super(logger);\n\n    }\n\n\n    uploadFileItem(fileItem: FileItem, endpoint: UploadEndPoint, options: any = {}): void {\n\n        this.logger.info('enter uploadService.uploadFileItem()');\n\n        const method = endpoint.method as string;\n        const url = endpoint.url as string;\n\n        const index = this.queue.indexOf(fileItem);\n        const item = this.queue[index];\n\n        this.onBeforeUploadItem(item);\n\n        if (item.isCancel) {\n            return;\n        }\n\n        item.uploadInProgress = true;\n\n        fileItem.sub = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n            this.xhr = new XMLHttpRequest();\n            this.xhr.open(method, url, true);\n\n            if (!!this.withCredentials) {\n                this.xhr.withCredentials = true;\n            }\n\n            // Add all the requested headers.\n            this.headers.forEach((values, name) => {\n                this.xhr.setRequestHeader(name, values.join(','));\n            });\n\n            /** load event */\n            const onLoad = () => {\n\n                const ok = this.xhr.status >= 200 && this.xhr.status < 300;\n\n                if (url === 'ngx_upload_mock') {\n                    // A successful response is delivered on the event stream.\n                    responseObserver.next(this.xhr.response);\n                    this.onSuccess(item, this.xhr.response, this.xhr.status, this.xhr.getAllResponseHeaders());\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    responseObserver.complete();\n                } else if (ok) {\n                    // A successful response is delivered on the event stream.\n                    responseObserver.next(this.xhr.response);\n                    this.onSuccess(item, this.xhr.response, this.xhr.status, this.xhr.getAllResponseHeaders());\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    responseObserver.complete();\n                } else {\n                    // An unsuccessful request is delivered on the error channel.\n                    responseObserver.error(this.xhr.response);\n                    this.onError(item, this.xhr.response, this.xhr.status, this.xhr.getAllResponseHeaders());\n                }\n            };\n\n            // error event handler\n            const onError = (err: ErrorEvent) => {\n                responseObserver.error(this.xhr.response);\n                this.onError(item, this.xhr.response, this.xhr.status, this.xhr.getAllResponseHeaders());\n            };\n\n            /**\n             * Les évènements d'envoi (upload) sont lancés sur l'objet XMLHttpRequest.upload\n             * @param event\n             */\n            const onProgress = (event) => {\n                const progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n                this.logger.debug('progress : ' + progress);\n                this.onProgressItem(item, progress);\n            };\n\n\n            // By default, register for load and error events.\n            this.xhr.addEventListener('load', onLoad);\n            this.xhr.addEventListener('error', onError);\n            this.xhr.upload.addEventListener('progress', onProgress);\n\n            let sendable;\n\n\n            if (!this.disableMultipart) {\n                sendable = item.formData;\n                sendable.append(item.alias, item.file, item.file.name);\n            } else {\n                this.logger.debug(item.file);\n                sendable = item.file;\n            }\n\n            this.xhr.send(sendable);\n\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                this.xhr.removeEventListener('error', onError);\n                this.xhr.removeEventListener('load', onLoad);\n                this.xhr.upload.removeEventListener('progress', onProgress);\n                // Finally, abort the in-flight request.\n                this.xhr.abort();\n            };\n        }).subscribe();\n    }\n\n\n    cancelFileItem(fileItem: FileItem) {\n        this.progressTotal = this.computeTotalProgress();\n        this.onCancel$.next(fileItem);\n    }\n\n}\n\n"]}