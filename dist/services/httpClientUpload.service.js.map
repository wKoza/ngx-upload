{"version":3,"file":"httpClientUpload.service.js","sourceRoot":"","sources":["../../src/services/httpClientUpload.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FileItem } from './fileItem.model';\nimport { NgxUploadLogger } from '../utils/logger.model';\nimport { UploadEndPoint } from '../utils/configuration.model';\nimport { HttpClient, HttpErrorResponse, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { AbstractUploadService } from './abstractUpload.service';\nimport { Subscription } from 'rxjs/index';\n\n\n// send an event for each upload event. These events can be catched by the user for call a callback\n\n@Injectable()\nexport class HttpClientUploadService extends AbstractUploadService {\n\n\n    sub: Subscription;\n\n    constructor(protected logger: NgxUploadLogger,\n                private httpClient: HttpClient) {\n        super(logger);\n    }\n\n\n    uploadFileItem(fileItem: FileItem, endpoint: UploadEndPoint, options: any = {}): void {\n\n        this.logger.info('enter uploadService.uploadFileItem()');\n\n        const method = endpoint.method as string;\n        const url = endpoint.url as string;\n\n        const index = this.queue.indexOf(fileItem);\n        const item = this.queue[index];\n\n        this.onBeforeUploadItem(item);\n\n        if (item.isCancel) {\n            return\n        }\n\n        item.uploadInProgress = true;\n\n        const sendable = item.formData;\n        sendable.append(item.alias, item.file, item.file.name);\n\n        const req = new HttpRequest(method, url, sendable, Object.assign(options, {reportProgress: true}));\n\n        fileItem.sub = this.httpClient.request(req).subscribe(\n            (event) => {\n                if (event.type === HttpEventType.UploadProgress) {\n                    // This is an upload progress event. Compute and show the % done:\n                    const percentDone = Math.round(event.loaded * 100 / (event.total ? event.total : event.loaded));\n                    this.logger.debug(`File is ${percentDone}% uploaded.`);\n                    fileItem.ɵonProgress(percentDone);\n                    this.onProgressItem(item, percentDone);\n\n                } else if (event instanceof HttpResponse) {\n                    // A successful response is delivered on the event stream.\n                    item.ɵonSuccess();\n                    this.onSuccess(item, event.body, event.status, event.headers);\n                }\n            },\n            (err) => {\n                if (err instanceof HttpErrorResponse) {\n                    if (url === 'ngx_upload_mock') {\n                        item.ɵonSuccess();\n                        this.onSuccess(item, err.message, err.status, err.headers);\n                    } else if (err.error instanceof Error) {\n                        // A client-side or network error occurred. Handle it accordingly.\n                        item.ɵonError();\n                        this.onError(item, err.error.message, err.status, err.headers);\n                    } else {\n                        // The backend returned an unsuccessful response code.\n                        // The response body may contain clues as to what went wrong,\n                        item.ɵonError();\n                        this.onError(item, err.error, err.status, err.headers);\n                    }\n                }\n            }\n        );\n    }\n\n    cancelFileItem(fileItem: FileItem) {\n        this.progressTotal = this.computeTotalProgress();\n        this.onCancel$.next(fileItem)\n    }\n\n}\n\n"]}